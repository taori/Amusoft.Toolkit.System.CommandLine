//HintName: Sub1Command.g.cs
// <auto-generated/>
using System.CommandLine;
using System.CommandLine.Invocation;
using System.Threading.Tasks;
using Amusoft.Toolkit.System.CommandLine.Attributes;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace Amusoft.Toolkit.System.CommandLine.Generator.UnitTests.TestResources;	

internal partial class Sub1Command
{
	private HandlerCommand _handler;

	private void BindHandler()
	{
		if (_handler is not null)
			return;

		this.SetHandler(async (context) =>
		{
			var host = context.BindingContext.GetRequiredService<IHost>();
			_handler = new HandlerCommand(host.Services.GetRequiredService<>());
			var p1 = context.ParseResult.GetValueForOption(TestProperty);
			await _handler.ExecuteAsync(context, p1);
		});
	}

	internal partial class HandlerCommand : InvokerBase
	{
	}

	public abstract class InvokerBase
	{
		public virtual Task ExecuteAsync(InvocationContext context, string testProperty) => Task.CompletedTask;	
	}
}